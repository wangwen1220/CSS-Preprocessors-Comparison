/* operators precedence 运算符优先级
.
[]
! ~ + -
is defined
** * / %
+ -
... ..
<= >= < >
in
== is != is not isnt
is a
&& and || or
?:
= := ?= += -= *= /= %=
not
if unless
*/


/* operators precedence demo */
a = 0
b = 1
!a and !b
// => false
// parsed as: (!a) and (!b)
not a or b
// => false
// parsed as: not (a or b)


/* unary operators */
!0 // => true
!!0 // => false
!1 // => false
!!5px // => true
-5px // => -5px
--5px // => 5px
not true // => false
not not true // => true


/* logical operation */
5 && 3 // => 3
0 || 5 // => 5


/* + - * / % ❤️  */
15px - 5px // => 10px
5 - 2 // => 3
5in - 50mm // => 3.031in
5s - 1000ms // => 4s
20mm + 4in // => 121.6mm
"foo " + "bar" // => "foo bar"
"num " + 15 // => "num 15"
2000ms + (1s * 2) // => 4000ms
5s / 2 // => 2.5s
4 % 2 // => 0


/* list */
list = 1 2 3
list[0] // => 1
list[-1] // => 3


/* range ❤️  */
1..5 // => 1 2 3 4 5
1...5 // => 1 2 3 4
5..1 // => 5 4 3 2 1


/* hashes
foo = { width: 10px, height: 20px }
for key, value in foo
    {key}: value
=> width: 10px;
   height: 20px;
*/


/* hashes extend (alias merge) ❤️
obj = {
    foo: 'tmp1'
    bar: 'tmp2'
}
obj2 = {
    baz: 'tmp3'
}
obj.foo // => 'tmp1'
obj['foo'] // => 'tmp1'
length(obj) // => 2
keys(foo) // => 'foo' 'bar'
values(foo) // => 'tmp1' 'tmp2'
extend(obj, obj2) // => {"foo":"('tmp1')","bar":"('tmp2')","baz":"('tmp3')"}
*/


/* in operator ❤️
words = foo bar baz
bar in words // => true
HEY in words // => false
*/


/* instance check 'is a'
15 is a 'unit' // => true
#fff is a 'rgba' // => true
15 is a 'rgba' // => false
type(#fff) == 'rgba' // => true
*/


/* variable definition */
// foo is defined // => false
// foo = 15px
// foo is defined // => true


/* conditional assignment ❤️
color := white
color ?= white
color = color is defined ? color : white
三句等同
*/


/* ternary expression
num = 15
num ? unit(num, 'px') : 20px // => 15px
*/


/* exponent */
// 2 ** 8 // => 256


/* color operation ❤️
#0e0 + #0e0 // => #0f0
#888 + 50% // => #c3c3c3
#888 - 50% // => #444
#f00 + 50deg // => #ffd500
*/
